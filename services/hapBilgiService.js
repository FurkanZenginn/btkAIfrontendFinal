import api from './api';
import authService from './authService';

const API_BASE = 'http://10.0.2.2:5000/api';

class HapBilgiService {
  // Hap bilgi olu≈ütur (post'tan)
  async createHapBilgiFromPost(postId) {
    try {
      const response = await fetch(`${API_BASE}/hap-bilgi/create-from-post`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${await this.getToken()}`
        },
        body: JSON.stringify({ postId })
      });
      return await response.json();
    } catch (error) {
      console.error('Hap bilgi olu≈üturma hatasƒ±:', error);
      throw error;
    }
  }

  // Hap bilgi olu≈ütur (AI soru ve yanƒ±tƒ±ndan) - Bellekte tut
  async createHapBilgiFromQuestion(question, aiResponse, aiGeneratedTags = []) {
    try {
      console.log('üìö createHapBilgiFromQuestion √ßaƒürƒ±ldƒ±');
      console.log('üìö Question:', question);
      console.log('üìö AI Response:', aiResponse);
      
      // AI etiketlerini olu≈ütur (eƒüer AI'dan gelen etiketler varsa onlarƒ± kullan, yoksa otomatik olu≈ütur)
      let aiTags = [];
      console.log('üîç HapBilgiService - AI Generated Tags Input:', aiGeneratedTags);
      
      if (aiGeneratedTags && aiGeneratedTags.length > 0) {
        aiTags = aiGeneratedTags;
        console.log('üè∑Ô∏è AI\'dan gelen etiketler kullanƒ±lƒ±yor:', aiTags);
      } else {
        console.log('üîÑ AI etiketleri bo≈ü, otomatik etiketleme devreye giriyor...');
        aiTags = this.extractKeywords(question, aiResponse);
        console.log('üè∑Ô∏è Otomatik olu≈üturulan etiketler:', aiTags);
      }
      
      console.log('üéØ Final AI Tags for HapBilgi:', aiTags);
      
      // Bellekte Hap Bilgi olu≈ütur (backend'e gitme)
      console.log('üíæ Bellekte Hap Bilgi olu≈üturuluyor...');
      
      const hapBilgi = {
        _id: `local_${Date.now()}`,
        title: this.generateTitleFromQuestion(question),
        content: this.generateContentFromAIResponse(aiResponse),
        category: this.detectCategory(question),
        difficulty: this.detectDifficulty(question),
        keywords: aiTags, // AI etiketlerini kullan
        tags: aiTags, // Yeni tags alanƒ±
        likes: 0,
        saves: 0,
        views: 0,
        createdAt: new Date().toISOString(),
        isLocal: true,
        originalQuestion: question,
        originalAIResponse: aiResponse
      };
      
      console.log('üìö Bellekte Hap Bilgi olu≈üturuldu:', hapBilgi);
      
      // AsyncStorage'a kaydet
      await this.saveLocalHapBilgi(hapBilgi);
      
      return { success: true, data: hapBilgi, message: 'Hap Bilgi bellekte olu≈üturuldu' };
    } catch (error) {
      console.error('Hap bilgi olu≈üturma hatasƒ± (soru):', error);
      return { success: false, error: error.message };
    }
  }

  // √ñnerilen hap bilgiler - Sadece yerel veriler
  async getRecommendedHapBilgiler(limit = 10) {
    try {
      console.log('üìö Yerel Hap Bilgiler alƒ±nƒ±yor...');
      
      // Sadece yerel verileri al (backend'e gitme)
      const localData = await this.getLocalHapBilgiler();
      
      if (localData && localData.length > 0) {
        console.log('‚úÖ Yerel Hap Bilgiler y√ºklendi:', localData.length, 'adet');
        // En yeni verileri √∂nce g√∂ster (tarihe g√∂re sƒ±rala)
        const sortedData = localData.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
        return { success: true, data: sortedData.slice(0, limit) };
      }
      
      // Veri yoksa bo≈ü array d√∂nd√ºr
      console.log('‚ùå Yerel Hap Bilgi verisi bulunamadƒ±, bo≈ü array d√∂nd√ºr√ºl√ºyor');
      return { success: true, data: [] };
    } catch (error) {
      console.error('Yerel Hap Bilgi alma hatasƒ±:', error);
      return { success: false, data: [], error: error.message };
    }
  }

  // YENƒ∞: T√ºm verileri zorla temizle ve yeniden ba≈ülat
  async resetAllHapBilgiler() {
    try {
      console.log('üîÑ T√úM Hap Bilgi verileri sƒ±fƒ±rlanƒ±yor...');
      await this.forceClearAllHapBilgiler();
      console.log('‚úÖ T√ºm veriler temizlendi, sistem yeniden ba≈ülatƒ±ldƒ±');
      return { success: true, message: 'T√ºm veriler temizlendi' };
    } catch (error) {
      console.error('‚ùå Veri sƒ±fƒ±rlama hatasƒ±:', error);
      return { success: false, error: error.message };
    }
  }

  // Hap bilgi arama
  async searchHapBilgiler(query, filters = {}) {
    try {
      const params = new URLSearchParams({ q: query, ...filters });
      const response = await fetch(`${API_BASE}/hap-bilgi/search?${params}`, {
        headers: {
          'Authorization': `Bearer ${await this.getToken()}`
        }
      });
      return await response.json();
    } catch (error) {
      console.error('Hap bilgi arama hatasƒ±:', error);
      throw error;
    }
  }

  // Benzer sorular
  async getSimilarQuestions(hapBilgiId, limit = 10) {
    try {
      const response = await fetch(`${API_BASE}/hap-bilgi/${hapBilgiId}/similar-questions?limit=${limit}`, {
        headers: {
          'Authorization': `Bearer ${await this.getToken()}`
        }
      });
      return await response.json();
    } catch (error) {
      console.error('Benzer sorular hatasƒ±:', error);
      // Hata durumunda bo≈ü array d√∂nd√ºr
      return { success: false, data: [], error: error.message };
    }
  }

  // Hap bilgi beƒüen
  async likeHapBilgi(hapBilgiId) {
    try {
      const response = await fetch(`${API_BASE}/hap-bilgi/${hapBilgiId}/like`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${await this.getToken()}`
        }
      });
      return await response.json();
    } catch (error) {
      console.error('Hap bilgi beƒüenme hatasƒ±:', error);
      throw error;
    }
  }

  // Hap bilgi kaydet
  async saveHapBilgi(hapBilgiId) {
    try {
      const response = await fetch(`${API_BASE}/hap-bilgi/${hapBilgiId}/save`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${await this.getToken()}`
        }
      });
      return await response.json();
    } catch (error) {
      console.error('Hap bilgi kaydetme hatasƒ±:', error);
      throw error;
    }
  }

  // Kullanƒ±cƒ±nƒ±n hap bilgileri
  async getUserHapBilgiler(userId) {
    try {
      const response = await fetch(`${API_BASE}/hap-bilgi/user/${userId}`, {
        headers: {
          'Authorization': `Bearer ${await this.getToken()}`
        }
      });
      return await response.json();
    } catch (error) {
      console.error('Kullanƒ±cƒ± hap bilgileri hatasƒ±:', error);
      throw error;
    }
  }

  // Hap bilgi detayƒ±
  async getHapBilgiDetail(hapBilgiId) {
    try {
      const response = await fetch(`${API_BASE}/hap-bilgi/${hapBilgiId}`, {
        headers: {
          'Authorization': `Bearer ${await this.getToken()}`
        }
      });
      return await response.json();
    } catch (error) {
      console.error('Hap bilgi detay hatasƒ±:', error);
      throw error;
    }
  }

  // Kategoriye g√∂re hap bilgiler
  async getHapBilgilerByCategory(category, limit = 20) {
    try {
      const response = await fetch(`${API_BASE}/hap-bilgi/category/${category}?limit=${limit}`, {
        headers: {
          'Authorization': `Bearer ${await this.getToken()}`
        }
      });
      return await response.json();
    } catch (error) {
      console.error('Kategori hap bilgileri hatasƒ±:', error);
      throw error;
    }
  }

  // Token alma
  async getToken() {
    try {
      const token = await authService.getToken();
      console.log('üîë HapBilgiService - Token alƒ±ndƒ±:', token ? 'Token var' : 'Token yok');
      return token;
    } catch (error) {
      console.error('üîë HapBilgiService - Token alma hatasƒ±:', error);
      return null;
    }
  }

  // Hap Bilgi i√ßeriƒüi getir (eski sistem i√ßin)
  async getHapBilgiContent() {
    try {
      const response = await fetch(`${API_BASE}/hap-bilgi/content`, {
        headers: {
          'Authorization': `Bearer ${await this.getToken()}`
        }
      });
      return await response.json();
    } catch (error) {
      console.error('Hap bilgi i√ßeriƒüi hatasƒ±:', error);
      // Hata durumunda bo≈ü data d√∂nd√ºr
      return { success: false, data: null, error: error.message };
    }
  }

  // Yardƒ±mcƒ± fonksiyonlar (bellekte Hap Bilgi olu≈üturma i√ßin)
  generateTitleFromQuestion(question) {
    const words = question.split(' ').slice(0, 5);
    return words.join(' ') + (question.length > 30 ? '...' : '');
  }

  generateContentFromAIResponse(aiResponse) {
    // AI yanƒ±tƒ±ndan ilk 150 karakteri al
    return aiResponse.substring(0, 150) + (aiResponse.length > 150 ? '...' : '');
  }

  detectCategory(question) {
    const lowerQuestion = question.toLowerCase();
    if (lowerQuestion.includes('matematik') || lowerQuestion.includes('sayƒ±') || lowerQuestion.includes('hesap') || lowerQuestion.includes('integral') || lowerQuestion.includes('t√ºrev')) return 'matematik';
    if (lowerQuestion.includes('fizik') || lowerQuestion.includes('kuvvet') || lowerQuestion.includes('enerji') || lowerQuestion.includes('hƒ±z')) return 'fizik';
    if (lowerQuestion.includes('kimya') || lowerQuestion.includes('molek√ºl') || lowerQuestion.includes('reaksiyon') || lowerQuestion.includes('element')) return 'kimya';
    if (lowerQuestion.includes('biyoloji') || lowerQuestion.includes('h√ºcre') || lowerQuestion.includes('organ') || lowerQuestion.includes('dna')) return 'biyoloji';
    if (lowerQuestion.includes('tarih') || lowerQuestion.includes('sava≈ü') || lowerQuestion.includes('devrim') || lowerQuestion.includes('osmanlƒ±')) return 'tarih';
    if (lowerQuestion.includes('coƒürafya') || lowerQuestion.includes('√ºlke') || lowerQuestion.includes('≈üehir') || lowerQuestion.includes('iklim')) return 'coƒürafya';
    if (lowerQuestion.includes('t√ºrk√ße') || lowerQuestion.includes('dil') || lowerQuestion.includes('gramer') || lowerQuestion.includes('edebiyat')) return 't√ºrk√ße';
    if (lowerQuestion.includes('ingilizce') || lowerQuestion.includes('english') || lowerQuestion.includes('grammar')) return 'ingilizce';
    return 'genel';
  }

  detectDifficulty(question) {
    const lowerQuestion = question.toLowerCase();
    if (lowerQuestion.includes('kolay') || lowerQuestion.includes('basit') || lowerQuestion.includes('temel')) return 'kolay';
    if (lowerQuestion.includes('zor') || lowerQuestion.includes('karma≈üƒ±k') || lowerQuestion.includes('ileri')) return 'zor';
    return 'orta';
  }

  // Akƒ±llƒ± AI etiket sistemi - YENƒ∞ VERSƒ∞YON
  extractKeywords(question, aiResponse) {
    console.log('üß† YENƒ∞ AKILLI AI ETƒ∞KET Sƒ∞STEMƒ∞ BA≈ûLADI');
    console.log('üìù Question:', question);
    console.log('ü§ñ AI Response:', aiResponse);
    
    const text = question + ' ' + aiResponse;
    const lowerText = text.toLowerCase();
    
    console.log('üîç Analiz edilen metin:', lowerText);
    
    // Ana ders tespiti (sadece bir tane)
    const mainSubject = this.detectMainSubject(lowerText);
    console.log('üìö Ana ders tespit edildi:', mainSubject);
    
    // Sƒ±nav t√ºr√º tespiti (sadece bir tane)
    const examType = this.detectExamType(lowerText);
    console.log('üìã Sƒ±nav t√ºr√º tespit edildi:', examType);
    
    // Spesifik konu etiketleri (i√ßeriƒüe g√∂re)
    const topicTags = this.detectSpecificTopics(lowerText, mainSubject);
    console.log('üéØ Spesifik konular:', topicTags);
    
    // Zorluk seviyesi
    const difficultyTags = [this.detectDifficultyLevel(lowerText)];
    console.log('üìä Zorluk seviyesi:', difficultyTags);
    
    // T√ºm etiketleri birle≈ütir
    const allTags = [...(examType ? [examType] : []), ...(mainSubject ? [mainSubject] : []), ...topicTags, ...difficultyTags];
    
    // Tekrar eden etiketleri kaldƒ±r ve maksimum 4 etiket d√∂nd√ºr
    const uniqueTags = [...new Set(allTags)].filter(tag => tag);
    
    console.log('üè∑Ô∏è YENƒ∞ AKILLI AI etiketleri olu≈üturuldu:', uniqueTags);
    return uniqueTags.slice(0, 4); // Maksimum 4 etiket
  }

  // Ana ders tespiti (sadece bir tane)
  detectMainSubject(text) {
    // Matematik
    if (text.includes('integral') || text.includes('t√ºrev') || text.includes('limit') || 
        text.includes('geometri') || text.includes('trigonometri') || text.includes('logaritma') ||
        text.includes('fonksiyon') || text.includes('denklem') || text.includes('polinom') ||
        text.includes('matematik') || text.includes('sayƒ±') || text.includes('hesap')) {
      return '#Matematik';
    }
    
    // Fizik
    if (text.includes('kuvvet') || text.includes('enerji') || text.includes('hƒ±z') || 
        text.includes('ivme') || text.includes('elektrik') || text.includes('manyetizma') ||
        text.includes('dalga') || text.includes('optik') || text.includes('termodinamik') ||
        text.includes('fizik') || text.includes('mekanik') || text.includes('atom')) {
      return '#Fizik';
    }
    
    // Kimya
    if (text.includes('molek√ºl') || text.includes('reaksiyon') || text.includes('element') ||
        text.includes('organik') || text.includes('analitik') || text.includes('karbon') ||
        text.includes('hidrokarbon') || text.includes('asit') || text.includes('baz') ||
        text.includes('kimya') || text.includes('bile≈üik') || text.includes('√ß√∂zelti')) {
      return '#Kimya';
    }
    
    // Biyoloji
    if (text.includes('h√ºcre') || text.includes('organ') || text.includes('dna') ||
        text.includes('genetik') || text.includes('ekoloji') || text.includes('evrim') ||
        text.includes('sistem') || text.includes('enzim') || text.includes('protein') ||
        text.includes('biyoloji') || text.includes('canlƒ±') || text.includes('organizma')) {
      return '#Biyoloji';
    }
    
    // Tarih
    if (text.includes('sava≈ü') || text.includes('devrim') || text.includes('osmanlƒ±') ||
        text.includes('cumhuriyet') || text.includes('inkƒ±lap') || text.includes('padi≈üah') ||
        text.includes('tarih') || text.includes('yƒ±l') || text.includes('d√∂nem') ||
        text.includes('imparatorluk') || text.includes('devlet') || text.includes('h√ºk√ºmdar')) {
      return '#Tarih';
    }
    
    // Coƒürafya
    if (text.includes('√ºlke') || text.includes('≈üehir') || text.includes('iklim') ||
        text.includes('n√ºfus') || text.includes('ekonomi') || text.includes('b√∂lge') ||
        text.includes('coƒürafya') || text.includes('harita') || text.includes('doƒüal') ||
        text.includes('√ßevre') || text.includes('kaynak') || text.includes('yerle≈üim')) {
      return '#Coƒürafya';
    }
    
    // T√ºrk√ße
    if (text.includes('dil') || text.includes('gramer') || text.includes('edebiyat') ||
        text.includes('paragraf') || text.includes('anlatƒ±m') || text.includes('c√ºmle') ||
        text.includes('t√ºrk√ße') || text.includes('kelime') || text.includes('anlam') ||
        text.includes('yazƒ±m') || text.includes('noktalama') || text.includes('kompozisyon')) {
      return '#T√ºrk√ße';
    }
    
    // ƒ∞ngilizce
    if (text.includes('english') || text.includes('grammar') || text.includes('vocabulary') ||
        text.includes('reading') || text.includes('writing') || text.includes('speaking') ||
        text.includes('ingilizce') || text.includes('tense') || text.includes('preposition') ||
        text.includes('pronoun') || text.includes('adjective') || text.includes('adverb')) {
      return '#ƒ∞ngilizce';
    }
    
    // Felsefe
    if (text.includes('felsefe') || text.includes('mantƒ±k') || text.includes('etik') ||
        text.includes('estetik') || text.includes('bilgi') || text.includes('varlƒ±k') ||
        text.includes('ahlak') || text.includes('deƒüer') || text.includes('d√º≈ü√ºnce') ||
        text.includes('akƒ±l') || text.includes('bilin√ß') || text.includes('ger√ßeklik')) {
      return '#Felsefe';
    }
    
    // Din K√ºlt√ºr√º
    if (text.includes('din') || text.includes('k√ºlt√ºr') || text.includes('ahlak') ||
        text.includes('ibadet') || text.includes('iman') || text.includes('kuran') ||
        text.includes('peygamber') || text.includes('allah') || text.includes('namaz') ||
        text.includes('oru√ß') || text.includes('zekat') || text.includes('hac')) {
      return '#DinK√ºlt√ºr√º';
    }
    
    return null;
  }

  // Sƒ±nav t√ºr√º tespiti
  detectExamType(text) {
    if (text.includes('yks') || text.includes('tyt') || text.includes('ayt') || 
        text.includes('√ºniversite') || text.includes('y√ºksek√∂ƒüretim')) {
      return '#YKS';
    }
    if (text.includes('lgs') || text.includes('ortaokul') || text.includes('8. sƒ±nƒ±f') ||
        text.includes('ilk√∂ƒüretim')) {
      return '#LGS';
    }
    if (text.includes('kpss') || text.includes('memur') || text.includes('devlet') ||
        text.includes('kamu')) {
      return '#KPSS';
    }
    if (text.includes('ales') || text.includes('y√ºksek lisans') || text.includes('doktora') ||
        text.includes('akademik')) {
      return '#ALES';
    }
    if (text.includes('y√∂s') || text.includes('yabancƒ±') || text.includes('yurtdƒ±≈üƒ±') ||
        text.includes('uluslararasƒ±')) {
      return '#Y√ñS';
    }
    
    return null;
  }

  // Spesifik konu etiketleri (ana derse g√∂re)
  detectSpecificTopics(text, mainSubject) {
    const topics = [];
    
    if (mainSubject === '#Matematik') {
      if (text.includes('integral') || text.includes('t√ºrev') || text.includes('limit')) {
        topics.push('#Kalk√ºl√ºs');
      }
      if (text.includes('geometri') || text.includes('√º√ßgen') || text.includes('√ßember') || text.includes('kare')) {
        topics.push('#Geometri');
      }
      if (text.includes('trigonometri') || text.includes('sin') || text.includes('cos') || text.includes('tan')) {
        topics.push('#Trigonometri');
      }
      if (text.includes('logaritma') || text.includes('log')) {
        topics.push('#Logaritma');
      }
      if (text.includes('fonksiyon') || text.includes('f(x)')) {
        topics.push('#Fonksiyonlar');
      }
    }
    
    if (mainSubject === '#Kimya') {
      if (text.includes('organik') || text.includes('karbon') || text.includes('hidrokarbon')) {
        topics.push('#OrganikKimya');
      }
      if (text.includes('analitik') || text.includes('√ß√∂zelti') || text.includes('titrasyon')) {
        topics.push('#AnalitikKimya');
      }
      if (text.includes('asit') || text.includes('baz') || text.includes('ph')) {
        topics.push('#AsitBaz');
      }
      if (text.includes('elektrokimya') || text.includes('pil') || text.includes('elektroliz')) {
        topics.push('#Elektrokimya');
      }
    }
    
    if (mainSubject === '#Fizik') {
      if (text.includes('elektrik') || text.includes('akƒ±m') || text.includes('voltaj') || text.includes('ohm')) {
        topics.push('#Elektrik');
      }
      if (text.includes('manyetizma') || text.includes('manyetik') || text.includes('ind√ºksiyon')) {
        topics.push('#Manyetizma');
      }
      if (text.includes('optik') || text.includes('ƒ±≈üƒ±k') || text.includes('mercek') || text.includes('ayna')) {
        topics.push('#Optik');
      }
      if (text.includes('mekanik') || text.includes('kuvvet') || text.includes('hareket')) {
        topics.push('#Mekanik');
      }
    }
    
    if (mainSubject === '#Biyoloji') {
      if (text.includes('genetik') || text.includes('kalƒ±tƒ±m') || text.includes('mutasyon') || text.includes('dna')) {
        topics.push('#Genetik');
      }
      if (text.includes('h√ºcre') || text.includes('organel') || text.includes('mitokondri')) {
        topics.push('#H√ºcreBiyolojisi');
      }
      if (text.includes('ekoloji') || text.includes('√ßevre') || text.includes('pop√ºlasyon')) {
        topics.push('#Ekoloji');
      }
      if (text.includes('sistem') || text.includes('organ') || text.includes('dola≈üƒ±m')) {
        topics.push('#Sistemler');
      }
    }
    
    if (mainSubject === '#Tarih') {
      if (text.includes('osmanlƒ±') || text.includes('padi≈üah') || text.includes('devlet')) {
        topics.push('#Osmanlƒ±Tarihi');
      }
      if (text.includes('cumhuriyet') || text.includes('atat√ºrk') || text.includes('inkƒ±lap')) {
        topics.push('#CumhuriyetTarihi');
      }
      if (text.includes('sava≈ü') || text.includes('√ßanakkale') || text.includes('kurtulu≈ü')) {
        topics.push('#Sava≈üTarihi');
      }
    }
    
    if (mainSubject === '#T√ºrk√ße') {
      if (text.includes('paragraf') || text.includes('anlatƒ±m') || text.includes('anlam')) {
        topics.push('#Paragraf');
      }
      if (text.includes('gramer') || text.includes('dilbilgisi') || text.includes('c√ºmle')) {
        topics.push('#Dilbilgisi');
      }
      if (text.includes('edebiyat') || text.includes('≈üiir') || text.includes('roman')) {
        topics.push('#Edebiyat');
      }
    }
    
    return topics.slice(0, 2); // Maksimum 2 spesifik konu
  }

  // Zorluk seviyesi tespiti
  detectDifficultyLevel(text) {
    if (text.includes('kolay') || text.includes('basit') || text.includes('temel') || 
        text.includes('ba≈ülangƒ±√ß') || text.includes('ilk') || text.includes('giri≈ü')) {
      return '#Kolay';
    }
    if (text.includes('zor') || text.includes('karma≈üƒ±k') || text.includes('ileri') || 
        text.includes('√ºst') || text.includes('y√ºksek') || text.includes('profesyonel')) {
      return '#Zor';
    }
    return '#Orta';
  }

  async saveLocalHapBilgi(hapBilgi) {
    try {
      const AsyncStorage = require('@react-native-async-storage/async-storage').default;
      const key = `local_hap_bilgi_${hapBilgi._id}`;
      await AsyncStorage.setItem(key, JSON.stringify(hapBilgi));
      console.log('üíæ Yerel Hap Bilgi kaydedildi:', key);
    } catch (error) {
      console.error('üíæ Yerel Hap Bilgi kaydetme hatasƒ±:', error);
    }
  }

  // T√úM ESKƒ∞ VERƒ∞LERƒ∞ TEMƒ∞ZLE (ZORLA)
  async forceClearAllHapBilgiler() {
    try {
      const AsyncStorage = require('@react-native-async-storage/async-storage').default;
      const keys = await AsyncStorage.getAllKeys();
      
      console.log('üîç T√ºm AsyncStorage keyleri:', keys);
      
      // T√ºm hap bilgi ile ilgili keyleri bul
      const hapBilgiKeys = keys.filter(key => 
        key.includes('hap_bilgi') || 
        key.includes('hapBilgi') || 
        key.includes('local_hap') ||
        key.includes('hap') ||
        key.includes('bilgi')
      );
      
      console.log('üóëÔ∏è Bulunan Hap Bilgi keyleri:', hapBilgiKeys);
      
      if (hapBilgiKeys.length > 0) {
        console.log('üßπ T√úM Hap Bilgi verileri zorla temizleniyor...');
        await AsyncStorage.multiRemove(hapBilgiKeys);
        console.log('‚úÖ T√úM eski veriler temizlendi');
        
        // Tekrar kontrol et
        const remainingKeys = await AsyncStorage.getAllKeys();
        const remainingHapKeys = remainingKeys.filter(key => 
          key.includes('hap_bilgi') || 
          key.includes('hapBilgi') || 
          key.includes('local_hap')
        );
        console.log('‚úÖ Kalan Hap Bilgi keyleri:', remainingHapKeys);
      } else {
        console.log('‚úÖ Zaten temiz, eski veri yok');
      }
    } catch (error) {
      console.error('‚ùå Eski veriler temizleme hatasƒ±:', error);
    }
  }

  async getLocalHapBilgiler() {
    try {
      const AsyncStorage = require('@react-native-async-storage/async-storage').default;
      const keys = await AsyncStorage.getAllKeys();
      const localKeys = keys.filter(key => key.startsWith('local_hap_bilgi_'));
      
      if (localKeys.length === 0) {
        console.log('üìö Yerel Hap Bilgi bulunamadƒ±');
        return [];
      }
      
      const localData = await AsyncStorage.multiGet(localKeys);
      const hapBilgiler = localData
        .map(([key, value]) => {
          try {
            return JSON.parse(value);
          } catch (error) {
            console.error('Yerel Hap Bilgi parse hatasƒ±:', error);
            return null;
          }
        })
        .filter(item => item !== null)
        .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
      
      console.log('üìö Yerel Hap Bilgiler y√ºklendi:', hapBilgiler.length, 'adet');
      return hapBilgiler;
    } catch (error) {
      console.error('Yerel Hap Bilgi alma hatasƒ±:', error);
      return [];
    }
  }
}

export default new HapBilgiService(); 